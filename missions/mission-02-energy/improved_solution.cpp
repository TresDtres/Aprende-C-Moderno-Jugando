#include <iostream>
#include <cmath>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <array>
#include <optional>  // Para std::optional (C++17)

// Espacio de nombres para constantes relacionadas con la simulaci√≥n
namespace SimulationConstants {
    // Usamos double para mayor precisi√≥n en c√°lculos cient√≠ficos
    constexpr double PI = 3.14159265358979323846;  // Constante PI precisa
    constexpr double DEFAULT_SOLAR_INTENSITY = 1361.0;  // W/m¬≤
    constexpr double DEFAULT_PANEL_AREA = 10.0;         // m¬≤
    constexpr double CRITICAL_ENERGY_THRESHOLD = 5000.0; // W
}

// Estructura para encapsular los datos de un d√≠a de simulaci√≥n
// Esto mejora la organizaci√≥n y legibilidad del c√≥digo
struct DailyData {
    double angleDegrees;  // √Ångulo en grados
    double efficiency;    // Eficiencia (0.0 a 1.0)

    // Constructor para inicializaci√≥n f√°cil
    DailyData(double ang, double eff) : angleDegrees(ang), efficiency(eff) {}
};

// Funci√≥n mejorada con validaci√≥n robusta y uso de par√°metros
// Retorna std::optional<double> para manejar errores de manera moderna (C++17)
std::optional<double> calculateSolarEnergy(double angleDegrees, double efficiency,
                                           double solarIntensity = SimulationConstants::DEFAULT_SOLAR_INTENSITY,
                                           double panelArea = SimulationConstants::DEFAULT_PANEL_AREA) {
    // Validaci√≥n de eficiencia con std::clamp (C++17)
    if (efficiency < 0.0 || efficiency > 1.0) {
        std::cerr << "‚ö†Ô∏è Advertencia: Eficiencia fuera de rango [0.0, 1.0]. Ajustando autom√°ticamente a "
                  << std::clamp(efficiency, 0.0, 1.0) << "\n";
        efficiency = std::clamp(efficiency, 0.0, 1.0);
    }

    // Normalizaci√≥n del √°ngulo usando std::fmod
    angleDegrees = std::fmod(angleDegrees, 360.0);
    if (angleDegrees < 0) angleDegrees += 360.0;

    // Conversi√≥n a radianes
    double angleRadians = angleDegrees * (SimulationConstants::PI / 180.0);

    // C√°lculo del coseno
    double cosine = std::cos(angleRadians);

    // Si el coseno no es positivo, no hay energ√≠a solar directa
    if (cosine <= 0.0) {
        return 0.0;
    }

    // C√°lculo de la energ√≠a
    double energy = solarIntensity * cosine * efficiency * panelArea;
    return energy;
}

int main() {
    double totalEnergy = 0.0;

    std::cout << "üåû SIMULACI√ìN DE ENERG√çA SOLAR ‚Äî COLONIA ESPACIAL\n";
    std::cout << "Los paneles est√°n da√±ados. Calcula la energ√≠a recolectada por d√≠a.\n\n";

    // Usamos std::vector para datos din√°micos, pero aqu√≠ podr√≠amos usar std::array para tama√±o fijo
    // std::array es m√°s eficiente para tama√±os conocidos en compile-time
    const std::array<DailyData, 5> dailyData = {{
        {0.0, 0.9},   // D√≠a 1
        {30.0, 0.7},  // D√≠a 2
        {60.0, 0.5},  // D√≠a 3
        {75.0, 0.3},  // D√≠a 4
        {90.0, 0.1}   // D√≠a 5
    }};

    // Bucle tradicional con √≠ndice para compatibilidad amplia (C++11+)
    // Usamos size_t para √≠ndices, que es el tipo unsigned apropiado para tama√±os
    for (size_t day = 0; day < dailyData.size(); ++day) {
        const auto& data = dailyData[day];  // Referencia constante para eficiencia

        // Llamada a la funci√≥n con manejo de optional (aunque en este caso siempre retorna valor)
        auto energyResult = calculateSolarEnergy(data.angleDegrees, data.efficiency);

        // Dado que la funci√≥n siempre retorna un valor v√°lido, extraemos directamente
        double dailyEnergy = *energyResult;
        totalEnergy += dailyEnergy;

        std::cout << "üìÖ D√≠a " << (day + 1)
                  << " ‚Äî √Ångulo: " << data.angleDegrees << "¬∞, Eficiencia: " << (data.efficiency * 100) << "%\n"
                  << "‚ö° Energ√≠a recolectada: " << std::fixed << std::setprecision(2) << dailyEnergy << " W\n\n";
    }

    std::cout << "üîã ENERG√çA TOTAL EN " << dailyData.size() << " D√çAS: "
              << std::fixed << std::setprecision(2) << totalEnergy << " W\n";

    // Uso de expresi√≥n condicional para simplificar
    std::cout << (totalEnergy < SimulationConstants::CRITICAL_ENERGY_THRESHOLD ?
                  "‚ö†Ô∏è  ¬°ALERTA! Energ√≠a insuficiente. Los sistemas cr√≠ticos podr√≠an fallar.\n" :
                  "‚úÖ ¬°Energ√≠a suficiente! La colonia sobrevivir√° al menos una semana.\n");

    return 0;
}

/*
EXPLICACI√ìN DE MEJORAS PARA ESTUDIANTES DE C++ MODERNO:

1. **Uso de double en lugar de float**: Para c√°lculos cient√≠ficos, double ofrece mayor precisi√≥n.

2. **Espacio de nombres (namespace)**: Agrupa constantes relacionadas, evitando contaminaci√≥n del espacio global.

3. **Estructura (struct) con constructor**: Encapsula datos relacionados, mejorando la mantenibilidad.

4. **std::optional (C++17)**: Maneja errores de manera funcional, evitando excepciones para casos simples.

5. **std::array (C++11)**: Contenedor seguro y eficiente para arrays de tama√±o fijo, con m√©todos como size().

6. **Bucle range-based (C++11)**: Sintaxis m√°s limpia y menos propensa a errores que bucles tradicionales.

7. **std::numbers::pi_v (C++20)**: Constante PI precisa y portable.

8. **std::clamp (C++17)**: Funci√≥n utilitaria para limitar valores, m√°s expresiva que min/max anidados.

9. **Referencias constantes**: Mejoran el rendimiento y previenen modificaciones accidentales.

10. **Expresi√≥n condicional en cout**: Sintaxis m√°s concisa para decisiones simples.

Estas mejoras hacen el c√≥digo m√°s seguro, legible y alineado con las mejores pr√°cticas de C++ moderno.
*/
